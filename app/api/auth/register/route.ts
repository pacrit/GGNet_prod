import { type NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ Iniciando processo de cadastro...");

    // 1. Parse do JSON
    let body;
    try {
      body = await request.json();
      console.log("‚úÖ Parse do JSON funcionou");
    } catch (error) {
      console.error("‚ùå Erro no parse do JSON:", error);
      return NextResponse.json({ error: "JSON inv√°lido" }, { status: 400 });
    }

    // 2. Valida√ß√µes b√°sicas
    const { email, password, displayName, avatarUrl, avatar_url, categories } =
      body;
    const avatar = avatarUrl || avatar_url || null;
    if (!email || !password || !displayName) {
      console.error("‚ùå Campos obrigat√≥rios faltando");
      return NextResponse.json(
        { error: "Email, senha e nome s√£o obrigat√≥rios" },
        { status: 400 }
      );
    }

    if (password.length < 6) {
      console.error("‚ùå Senha muito curta");
      return NextResponse.json(
        { error: "Senha deve ter pelo menos 6 caracteres" },
        { status: 400 }
      );
    }

    console.log("‚úÖ Valida√ß√µes b√°sicas passaram");

    // 3. Conectar ao banco
    let sql;
    try {
      console.log("üîÑ Conectando ao banco...");
      const { neon } = await import("@neondatabase/serverless");
      sql = neon(process.env.DATABASE_URL!);
      console.log("‚úÖ Conex√£o com banco funcionou");
    } catch (error) {
      console.error("‚ùå Erro na conex√£o com banco:", error);
      return NextResponse.json(
        { error: "Erro interno do servidor" },
        { status: 500 }
      );
    }

    // 4. Verificar se usu√°rio j√° existe
    try {
      console.log("üîÑ Verificando se usu√°rio existe...");
      const existingUsers = await sql`
        SELECT id FROM users WHERE email = ${email}
      `;
      console.log(
        "‚úÖ Consulta executada, usu√°rios encontrados:",
        existingUsers.length
      );

      if (existingUsers.length > 0) {
        console.log("‚ùå Usu√°rio j√° existe");
        return NextResponse.json(
          { error: "Email j√° cadastrado" },
          { status: 400 }
        );
      }
    } catch (error) {
      console.error("‚ùå Erro ao verificar usu√°rio existente:", error);
      return NextResponse.json(
        { error: "Erro interno do servidor" },
        { status: 500 }
      );
    }

    // 5. Hash da senha
    let hashedPassword;
    try {
      console.log("üîÑ Fazendo hash da senha...");

      const JWT_SECRET = process.env.JWT_SECRET;
      const encoder = new TextEncoder();
      const data = encoder.encode(password + JWT_SECRET + "salt");

      const hashBuffer = await crypto.subtle.digest("SHA-256", data);
      const hashArray = Array.from(new Uint8Array(hashBuffer));
      hashedPassword = hashArray
        .map((b) => b.toString(16).padStart(2, "0"))
        .join("");

      console.log("‚úÖ Hash criado, tamanho:", hashedPassword.length);
    } catch (error) {
      console.error("‚ùå Erro ao fazer hash:", error);
      return NextResponse.json(
        { error: "Erro interno do servidor" },
        { status: 500 }
      );
    }

    // 6. Criar usu√°rio
    let newUser;
    try {
      console.log("üîÑ Criando usu√°rio no banco...");
      const result = await sql`
        INSERT INTO users (email, password_hash, display_name, avatar_url, created_at, updated_at)
        VALUES (${email}, ${hashedPassword}, ${displayName}, ${avatar}, NOW(), NOW())
        RETURNING id, email, display_name, created_at, avatar_url
      `;
      newUser = result[0];
      console.log("‚úÖ Usu√°rio criado:", newUser.id);
    } catch (error) {
      console.error("‚ùå Erro ao criar usu√°rio:", error);
      return NextResponse.json(
        { error: "Erro interno do servidor" },
        { status: 500 }
      );
    }

    // 6.1. Salvar categorias favoritas do usu√°rio
    if (Array.isArray(categories) && categories.length > 0) {
      try {
        for (const categoryId of categories) {
          await sql`
        INSERT INTO user_categories (user_id, category_id)
        VALUES (${newUser.id}, ${categoryId})
      `;
        }
        console.log("‚úÖ Categorias favoritas salvas:", categories);
      } catch (error) {
        console.error("‚ùå Erro ao salvar categorias favoritas:", error);
        // N√£o retorna erro aqui para n√£o impedir o cadastro do usu√°rio
      }
    }

    // 7. Gerar token JWT
    let token;
    try {
      console.log("üîÑ Gerando token...");

      const header = { alg: "HS256", typ: "JWT" };
      const now = Math.floor(Date.now() / 1000);
      const payload = {
        userId: newUser.id,
        email: newUser.email,
        displayName: newUser.display_name,
        iat: now,
        exp: now + 7 * 24 * 60 * 60, // 7 dias
      };

      const JWT_SECRET = process.env.JWT_SECRET;
      const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, "");
      const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, "");
      const signature = btoa(
        `${encodedHeader}.${encodedPayload}.${JWT_SECRET}`
      ).replace(/=/g, "");

      token = `${encodedHeader}.${encodedPayload}.${signature}`;
      console.log("‚úÖ Token gerado, tamanho:", token.length);
    } catch (error) {
      console.error("‚ùå Erro ao gerar token:", error);
      return NextResponse.json(
        { error: "Erro interno do servidor" },
        { status: 500 }
      );
    }

    console.log("üéâ Cadastro realizado com sucesso!");

    return NextResponse.json({
      message: "Usu√°rio cadastrado com sucesso",
      user: {
        id: newUser.id,
        email: newUser.email,
        displayName: newUser.display_name,
        avatarUrl: newUser.avatar_url,
      },
      token,
    });
  } catch (error) {
    console.error("‚ùå Erro geral no cadastro:", error);
    return NextResponse.json(
      { error: "Erro interno do servidor" },
      { status: 500 }
    );
  }
}
